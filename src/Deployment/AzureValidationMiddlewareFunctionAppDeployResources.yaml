resources:
- repo: self

trigger:
- develop

pool:
  vmImage: 'ubuntu-latest'

jobs:

  - job: Azure_Validation_Middleware_Function_AppDeployment
    displayName: Azure Validation Middleware Function App

    variables:
      
      environment: 'dev'
      subscriptionIdToObserve: "6690b014-bdbd-4496-98ee-f2f255699f70"
      subscriptionIdSource: "6690b014-bdbd-4496-98ee-f2f255699f70"
      servicePrincipalClientId: "096987b5-0f60-49d9-848f-c946fa197834"
      
      ### Function app configuration variables
      # Path variables
      deploymentRootPath: 'src/Deployment/arm'
      # ARM templates
      functionAppDeploymentArmTemplatePath: '$(deploymentRootPath)/AzureValidationMiddlewareFunctionApp.json'
      functionAppDeploymentArmTemplateParamsFilePath: '$(deploymentRootPath)/AzureValidationMiddlewareFunctionApp.parameters.json'
      functionsRepositoryPath: '$(Build.SourcesDirectory)/src/AzureValidationMiddlewareFunctionApp'
      functionConfigurationFilePath: '$(functionsRepositoryPath)/template.settings.json'
      eventgridQueueTrigerFunctionFilePath: '$(functionsRepositoryPath)/QueueItemValidationFunction/function.json'
      retryTimerFunctionFilePath: '$(functionsRepositoryPath)/RetryFunction/function.json'

      # SQL DB option variables
      databaseToValidate: "servicedbtest"
      databaseServerToValidate: "servicedbtestsrv.database.windows.net"
      databaseUserToValidate: "sqllgn01"
      devcloudDevSharedVaultName: "$(environment)-avm-kv"
      dbSqlPasswordSecret: "dbsqlpassword"
      # General configuration file variables
      sharedKeyVaultName: '$(environment)-shared-kv'
      
      ### Function App Resource group variables (eg. name, rg-name, loganalytics etc)
      functionName: 'validation-middleware-function'
      functionAppName: '$(functionName)-app'
      resourceGroupName: '$(environment)-$(functionAppName)-rg'
      appServiceName: '$(environment)-$(functionAppName)-service'
      appServicePlanName: '$(environment)-$(functionAppName)-serviceplan'
      storageAccountName: '$(environment)shdbnagefst'
      appInsightsID: '/subscriptions/$(subscriptionIdSource)/resourceGroups/boriszn-we-avm-shared-rg/providers/microsoft.insights/components/$(environment)-loganalytics-avm'

      # Event Grid + Storage Account variables
      eventGridName: '$(environment)-validation-middleware-eg'
      eventGridNameResourceGroupName: '$(eventGridName)-rg'
      ## Topic is object which will generates events 
      eventGridTopic: '/subscriptions/$(subscriptionIdToObserve)/resourcegroups/boriszn-we-avm-vm-container-rg'
      eventGridQueueStorageAccountName: '$(environment)vmegrid'
      eventGridStorageAccountRg: $(eventGridNameResourceGroupName)
      mainEventQueue: 'main-event-q'
      processedQueueName: 'processed-event-q'
      retryQueueName: 'retry-event-q'
    
    steps:

    # Deploy EventGrid and Storage Account (Where Topic -> Subscription and Endpoint -> Storage Queue)
    - task: AzureCLI@1
      displayName: Deploy EventGrid and Storage Account. Where Topic is Subscription and Endpoint is Storage Queue
      inputs:
        azureSubscription: $(subscription-avm-shared)
        scriptLocation: inlineScript
        inlineScript: | 
            
            echo "====== Start provision of EventGrid and Storage Account ======"
            echo "=============================================================="
        
            # Variables
            rsourceGroup="$(eventGridNameResourceGroupName)"
            storagename="$(eventGridQueueStorageAccountName)"
            queuename="$(mainEventQueue)"
            topicname="$(eventGridName)-topic" 
            eventSubscriptionName="$(eventGridName)"
            topicid="$(eventGridTopic)"
            storageSKU="Standard_LRS"
            location="westeurope"

            # 1. Create a resource group
            echo "============ Creating Resource Group " $rsourceGroup
            echo "=========================================================================================================================="
            az group create --name $rsourceGroup --location $location

            # 2. Create a custom topic
            echo "=============== Creating Custom topic " $topicname
            echo "=========================================================================================================================="
            az eventgrid topic create --name $topicname -l $location -g $rsourceGroup

            # 3. Create Queue storage with main Queue and 2 additinal queue (processedQueue, failedQueue)
            echo "================ Creating Storage Account Queue " $storagename " | "  $queuename
            echo "=========================================================================================================================="
            az storage account create -n $storagename -g $rsourceGroup -l $location --sku $storageSKU
            echo "==== Creating Queue "
            az storage queue create --name $queuename --account-name $storagename

            ## 3.1 Create 2 additinal Queues
            echo "==================== Create 2 additinal Queues "
            echo "=========================================================================================================================="
            az storage queue create --name $(processedQueueName) --account-name $storagename
            az storage queue create --name $(retryQueueName) --account-name $storagename

            ## 3.2 Get storage access key 
            echo "==================== Get/Save storage access key "
            echo "=========================================================================================================================="
            storageAccountAccessKey=$(az storage account keys list -g $rsourceGroup -n $storagename  --query '[0].value' -o tsv)
            echo "##vso[task.setvariable variable=storageAccountAccessKey;]$storageAccountAccessKey"
            echo "=== [result] storage access key " $storageAccountAccessKey

            # 4. Subscribe to a custom topic
            echo "====================  Creating Event Grid Subscription " $eventSubscriptionName " | topic Id "  $topicid
            echo "=========================================================================================================================="
            storageid=$(az storage account show --name $storagename --resource-group $rsourceGroup --query id --output tsv)
            queueid="$storageid/queueservices/default/queues/$queuename"
            
            # 5. Create Event Grid Subscription
            echo "==================== Create Event Grid Subscription. Topic ID:  $topicid | Event Subscription Name: $eventSubscriptionName | Queue Id: $queueid "
            echo "=========================================================================================================================="
            az eventgrid event-subscription create \
                --source-resource-id $topicid \
                --name $eventSubscriptionName \
                --endpoint-type "storagequeue" \
                --endpoint $queueid \
                --included-event-types Microsoft.Resources.ResourceWriteSuccess \
                --advanced-filter data.operationName StringContains 'Microsoft.Compute/virtualMachines/write'
          
    #[Azure Deployment]: Create Or Update Resource Group for Azure Function App
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment: Create Or Update Resource Group for the Azure Function App'
      enabled: true
      inputs:
        azureSubscription: '$(subscription-avm-shared)'
        resourceGroupName: '$(resourceGroupName)'
        location: 'westeurope'
        csmFile: '$(functionAppDeploymentArmTemplatePath)'
        csmParametersFile: '$(functionAppDeploymentArmTemplateParamsFilePath)'
        overrideParameters: '
          -appInsightsID "$(appInsightsID)" 
          -appServiceName "$(appServiceName)" 
          -appServicePlanName "$(appServicePlanName)"
          -resourceGroupName "$(resourceGroupName)" 
          -storageAccountName "$(storageAccountName)" 
          -subscriptionIdSource "$(subscriptionIdSource)" 
          -eventGridStorageAccountAcessKey "DefaultEndpointsProtocol=https;AccountName=$(eventGridQueueStorageAccountName);AccountKey=$(storageAccountAccessKey)"
          -eventGridStorageAccountName "$(eventGridQueueStorageAccountName)_STORAGE"
          '

    # Get keyvault secrets
    - task: AzureKeyVault@1
      displayName: "Get Keyvault Secrets"
      continueOnError: true
      inputs:
        azureSubscription: $(subscription-avm-shared)
        KeyVaultName: '$(devcloudDevSharedVaultName)'
        SecretsFilter: dbsqlpassword, ValidationMeedlewareFunctionApp-WebRequestSecurityToken, db-new-vmWebhook
            
    # Replace configuration template file
    - task: AzurePowerShell@4
      displayName: 'Replace values in configuration Template file (template.settings.json)'
      inputs:
        azureSubscription: $(subscription-avm-shared)
        scriptType: "inlineScript"
        azurePowerShellVersion: LatestVersion
        inline: | 
            # Replace configuration section
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##PrincipalAccountId##','$(servicePrincipalClientId)') | 
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace SecurityToken
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##SecurityToken##','$(ValidationMeedlewareFunctionApp-WebRequestSecurityToken)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace SharedKeyVaultName
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##SharedKeyVaultName##','$(sharedKeyVaultName)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace EventGridResourceGroupName
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##EventGridResourceGroupName##','$(eventGridStorageAccountRg)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace EventGridQueueStorageAccountName
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##EventGridStorageAccountName##','$(eventGridQueueStorageAccountName)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace MainEventQueue
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##MainEventQueue##','$(mainEventQueue)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace ProcessedQueueName
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##ProcessedQueueName##','$(processedQueueName)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace RetryQueueName
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##RetryQueueName##','$(retryQueueName)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace DatabaseToValidate
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##DatabaseToValidate##','$(databaseToValidate)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace databaseServerToValidate
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##DatabaseServerToValidate##','$(databaseServerToValidate)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace database User To Validate
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##DatabaseUserToValidate##','$(databaseUserToValidate)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace devcloudDevSharedVaultName
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##DevcloudDevSharedVaultName##','$(devcloudDevSharedVaultName)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace dbSqlPasswordSecret
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##DbSqlPasswordSecret##','$(dbSqlPasswordSecret)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace dbSqlPassword
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##DbSqlPassword##','$(dbSqlPassword)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace LabSubscription
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##LabSubscription##','$(subscriptionLab)') |
            Set-Content -Path $(functionConfigurationFilePath)
            # Replace db-sync-new-vmWebhook
            ((Get-Content -path $(functionConfigurationFilePath) -Raw) -replace '##DbSyncNewVmWebhook##','$(db-new-vmWebhook)') |
            Set-Content -Path $(functionConfigurationFilePath)
            
            # Display configuration content
            Get-Content -path  $(functionConfigurationFilePath)
    
    # Replace storage account name in EventgridQueueTrigerFunction and in RetryTimerFunction function.json file
    - task: AzurePowerShell@4
      displayName: 'Replace storage account name in EventgridQueueTrigerFunction and in RetryTimerFunction function.json file'
      inputs:
        azureSubscription: $(subscription-avm-shared)
        scriptType: "inlineScript"
        azurePowerShellVersion: LatestVersion
        inline: | 
            # Replace storage account in EventgridQueueTrigerFunction 
            ((Get-Content -path $(eventgridQueueTrigerFunctionFilePath) -Raw) -replace 'devshared01events_STORAGE','$(eventGridQueueStorageAccountName)_STORAGE') | 
              Set-Content -Path $(eventgridQueueTrigerFunctionFilePath)
           
            # Replace storage account in RetryTimerFunction 
            ((Get-Content -path $(retryTimerFunctionFilePath) -Raw) -replace 'devshared01events_STORAGE','$(eventGridQueueStorageAccountName)_STORAGE') | 
              Set-Content -Path $(retryTimerFunctionFilePath)
            
            # Display configuration content
            Get-Content -path  $(retryTimerFunctionFilePath)
            Get-Content -path  $(eventgridQueueTrigerFunctionFilePath)

    # Buld deployment archive
    - task: ArchiveFiles@2
      displayName: 'Build deployment arhive of Azure Function App'
      inputs:
        rootFolderOrFile: '$(functionsRepositoryPath)' 
        includeRootFolder: false 
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/AzureValidationMeedlewareFunctionApp.zip' 
        replaceExistingArchive: true

    # Deploy azure function from Archive
    - task: AzureFunctionApp@1
      displayName: Deploy Azure Function App
      inputs:
        azureSubscription: $(subscription-avm-shared)
        appName: $(appServiceName)
        package: $(build.artifactstagingdirectory)/AzureValidationMeedlewareFunctionApp.zip

    # Get App Service object id
    - task: AzureCLI@1
      displayName: Get App Service/Function object id
      inputs:
        azureSubscription: $(subscription-avm-shared)
        scriptLocation: inlineScript
        inlineScript: | 
            echo "========== Get ObjectId from AD Servcie Principal by app service Display Name ($(appServiceName)) ==========="
            objectId=$(az ad sp list --all --display-name $(appServiceName) --query '[0].objectId' -o tsv)

            objectId="c3e6fb93-85f5-4d0f-abb9-359d56494059"
            echo "=========== Function app ObjectId [$objectId] ============"
            echo "##vso[task.setvariable variable=avmAppServiceObjectId;]$objectId"

    # Assign Contributor role for MSI principal
    - task: AzurePowerShell@4
      displayName: 'Assign Contributor for MSI Role'
      continueOnError: true
      inputs:
        azureSubscription: $(subscription-avm-shared)
        scriptType: "inlineScript"
        azurePowerShellVersion: LatestVersion
        inline: | 

         $objectId="$(avmAppServiceObjectId)"

         echo "=========== Function app ObjectId [$objectId] ============"

         # Check is role assignment alredy exists
         echo "============ Checking and Getting Role Assignment ========================"
         echo "=========================================================================="

         if((Get-AzRoleAssignment -ObjectId $objectId).Count -ne 0){
           Get-AzRoleAssignment -ObjectId $objectId
         }

          # Create role assignment for Virtual Machines and Network Interfaces to the Sabscription
          try 
          { 
            Write-Host "=========== Creating role assignment for [$(subscriptionIdToObserve)]. Resource Group Name [$(eventGridQueueStorageAccountName)] ==========="
            Write-Host "=========================================================================================================================================="
            
            # Subscription
            New-AzRoleAssignment `
              -ObjectId $objectId `
              -RoleDefinitionName "Contributor" `
              -Scope "/subscriptions/$(subscriptionIdToObserve)"

            # Resource group
            # New-AzRoleAssignment `
            #   -ObjectId $objectId `
            #   -RoleDefinitionName "Contributor" `
            #   -Scope "/subscriptions/$(subscriptionIdToObserve)/resourceGroups/$(resourceGroupName)"
          }
          catch {
              Write-Host "An error occurred:"
              Write-Host $_
          }

          # Create role assignment for StorageAccounts to the Function App
          try 
          { 

            Write-Host "======= Creating role assignment for Resource [$(eventGridQueueStorageAccountName)]. Resource Group [$(eventGridStorageAccountRg)] ====="
            Write-Host "========================================================================================================================================"

            New-AzRoleAssignment `
                -ObjectId $objectId `
                -RoleDefinitionName "Contributor" `
                -ResourceName "$(eventGridQueueStorageAccountName)" `
                -ResourceType "Microsoft.Storage/storageAccounts" `
                -ResourceGroupName "$(eventGridStorageAccountRg)"

            # Example
            #  New-AzRoleAssignment `
            #     -ObjectId c3e6fb93-85f5-4d0f-abb9-359d56494059 `
            #     -RoleDefinitionName "Contributor" `
            #     -ResourceName "devvmegrid" `
            #     -ResourceType "Microsoft.Storage/storageAccounts" `
            #     -ResourceGroupName "dev-validation-middleware-eg-rg"
          }
          catch {
              Write-Host "An error occurred:"
              Write-Host $_
          }
